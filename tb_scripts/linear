df <- read.csv('linear.csv')

# We create 2 vectors x and y. It is a polynomial function.
x2 <- df$Independent
y2 <- df$Dependent 

# Basic plot of x and y :
# plot(x,y,col=rgb(0.4,0.4,0.8,0.6), pch=16, cex=1.3, xlab="", ylab="", xaxt="n", yaxt="n") 
plot(x,y,col=rgb(0.4,0.4,0.8,0.6), pch=16, cex=1.3, xlab="", ylab="", xaxt="n", yaxt="n") 
# Can we find a polynome that fit this function ?
model <- lm(y ~ x + I(x^2) + I(x^3))

# I can get the features of this model :
#summary(model)
#model$coefficients
#summary(model)$adj.r.squared

#For each value of x, I can get the value of y estimated by the model, and the confidence interval around this value.
myPredict <- predict(model, interval="predict")

#Finally, I can add it to the plot using the line and the polygon function with transparency.
ix <- sort(x,index.return=T)$ix
lines(x[ix], predict_model[ix , 1], col=2, lwd=2)
polygon(c(rev(x[ix]), x[ix]), c(rev(predict_model[ ix,3]), predict_model[ ix,2]), col = rgb(0.7,0.7,0.7,0.4) , border = NA)


plot(x, y, col=rgb(0.4,0.4,0.8,0.6), pch=16, cex=1.2, xlab="", ylab="", xaxt="n", yaxt="n")

model <- lm(y ~ x)
predict_model <- predict(model, interval="predict")
lines(model$fitted.values, col=2, lwd=2)

print(model$fitted.values)

install.packages("ggpubr")
ggpubr::show_point_shapes()

model <- lm(y ~ x)
predict_model <- predict(model, interval="predict")
plot(x, y, col=rgb(0.4,0.4,0.8,0.6), pch=16, cex=1.2, xlab="", ylab="", xaxt="n", yaxt="n")
ix <- sort(x, index.return=T)$ix
lines(x[ix], predict_model[ix , 1], col=2, lwd=2)
polygon(c(rev(x[ix]), x[ix]), c(rev(predict_model[ix, 3]), predict_model[ix, 2]), col = rgb(0.7,0.7,0.7,0.4), border = NA)

plot(x, y)

y <- c(1:100)
x <- c(-4.400327034,5.428396028,1.401835325,8.347444696,4.653595058,1.768965792,2.301670121,2.906690807,
       16.86055207,12.79819406,19.43688567,9.535898321,11.44692921,12.85126784,6.102193819,14.9299838,14.10825511,
       9.061679003,15.02212052,18.6447931,17.02989089,18.93455371,31.15646579,21.87836403,19.74845288,26.59660838,
       36.50126821,31.89097261,22.11512438,29.18472781,38.72830304,40.13431252,27.21738666,39.88887474,36.23490911,
       32.17006556,30.10621489,37.92219413,33.15571816,33.7647255,33.7444351,34.12172411,37.19967163,45.34378315,
       35.98530015,53.90675935,50.52742803,46.06208273,57.82271516,55.3300409,42.16904545,52.68638053,54.81650327,
       52.07962127,54.82388858,52.96289171,66.86594353,55.91500631,53.46845318,69.93363692,63.77966506,56.9824017,
       57.10158014,57.0690513,62.38929311,74.9465375,62.0905341,73.7790738,59.19482129,60.94042919,70.84003803,
       75.95901236,81.58801567,74.87006685,78.72743515,83.59639222,80.82508933,76.42767133,71.59042346,83.83529445,
       89.09992891,79.91862252,74.4198755,75.99386989,91.45464708,89.15434974,77.38263974,91.69502627,83.96595701,
       80.07178088,87.70105337,82.82445978,91.9984167,95.93813464,93.32235278,100.9042819,87.4809175,102.1559695,
       106.5412224,94.53627918
)
df <- data.frame(y = y, x = x)
plot(df$x
     , df$y
     , col=rgb(0.4,0.4,0.8,0.6)
     , pch=16
     , cex=1.2
     , xlab=""
     , ylab=""
     , xaxt="n"
     , yaxt="n")

model <- lm(y ~ x)
lines(model$fitted.values, col=2, lwd=2)
